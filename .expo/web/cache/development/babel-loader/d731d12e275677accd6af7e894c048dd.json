{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useState } from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nvar isOrientationPortrait = function isOrientationPortrait(_ref) {\n  var width = _ref.width,\n    height = _ref.height;\n  return height >= width;\n};\nvar isOrientationLandscape = function isOrientationLandscape(_ref2) {\n  var width = _ref2.width,\n    height = _ref2.height;\n  return width >= height;\n};\nexport function useDeviceOrientation() {\n  var screen = Dimensions.get('screen');\n  var initialState = {\n    portrait: isOrientationPortrait(screen),\n    landscape: isOrientationLandscape(screen)\n  };\n  var _useState = useState(initialState),\n    _useState2 = _slicedToArray(_useState, 2),\n    orientation = _useState2[0],\n    setOrientation = _useState2[1];\n  useEffect(function () {\n    var onChange = function onChange(_ref3) {\n      var screen = _ref3.screen;\n      setOrientation({\n        portrait: isOrientationPortrait(screen),\n        landscape: isOrientationLandscape(screen)\n      });\n    };\n    var subscription = Dimensions.addEventListener('change', onChange);\n    return function () {\n      if (typeof (subscription === null || subscription === void 0 ? void 0 : subscription.remove) === 'function') {\n        subscription.remove();\n      } else {\n        Dimensions.removeEventListener('change', onChange);\n      }\n    };\n  }, []);\n  return orientation.portrait === true ? 'PORTRAIT' : 'LANDSCAPE';\n}","map":{"version":3,"mappings":";AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAAA;AAGA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAqB,CAAGC;EAAA,IAAGC,KAAF,GAADD,KAAGC,KAAF;IAASC,SAAVF,KAAUE;EAAV,OAC5BA,MAAM,IAAID,KADkB;AAAA,CAA9B;AAEA,IAAME,sBAAsB,GAAG,SAAzBA,sBAAsB,CAAGC;EAAA,IAAGH,KAAF,GAADG,MAAGH,KAAF;IAASC,SAAVE,MAAUF;EAAV,OAC7BD,KAAK,IAAIC,MADoB;AAAA,CAA/B;AAGA,OAAO,SAASG,oBAAT,GAAgC;EACrC,IAAMC,MAAM,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,CAAf;EACA,IAAMC,YAAY,GAAG;IACnBC,QAAQ,EAAEX,qBAAqB,CAACO,MAAD,CADZ;IAEnBK,SAAS,EAAER,sBAAsB,CAACG,MAAD;EAFd,CAArB;EAKA,gBAAsCR,QAAQ,CAACW,YAAD,CAA9C;IAAA;IAAOG,WAAD;IAAcC,cAAd;EAENhB,SAAS,CAAC,YAAM;IACd,IAAMiB,QAAQ,GAAG,SAAXA,QAAQ,CAAGC,OAAwC;MAAA,IAArCT,SAAqCS,MAArCT;MAClBO,cAAc,CAAC;QACbH,QAAQ,EAAEX,qBAAqB,CAACO,MAAD,CADlB;QAEbK,SAAS,EAAER,sBAAsB,CAACG,MAAD;MAFpB,CAAD,CAAd;IAID,CALD;IAOA,IAAMU,YAAY,GAAGT,UAAU,CAACU,gBAAX,CAA4B,QAA5B,EAAsCH,QAAtC,CAArB;IAEA,OAAO,YAAM;MACX,IAAI,QAAOE,YAAP,aAAOA,YAAP,uBAAOA,YAAY,CAAEE,MAArB,MAAgC,UAApC,EAAgD;QAC9CF,YAAY,CAACE,MAAb;MACD,CAFD,MAEO;QAELX,UAAU,CAACY,mBAAX,CAA+B,QAA/B,EAAyCL,QAAzC;MACD;IACF,CAPD;EAQD,CAlBQ,EAkBN,EAlBM,CAAT;EAoBA,OAAOF,WAAW,CAACF,QAAZ,KAAyB,IAAzB,GAAgC,UAAhC,GAA6C,WAApD;AACD","names":["useEffect","useState","isOrientationPortrait","_ref","width","height","isOrientationLandscape","_ref2","useDeviceOrientation","screen","Dimensions","get","initialState","portrait","landscape","orientation","setOrientation","onChange","_ref3","subscription","addEventListener","remove","removeEventListener"],"sources":["useDeviceOrientation.ts"],"sourcesContent":["/* eslint-disable no-shadow */\nimport { useEffect, useState } from 'react';\nimport { Dimensions, ScaledSize } from 'react-native';\n\nconst isOrientationPortrait = ({ width, height }: ScaledSize) =>\n  height >= width;\nconst isOrientationLandscape = ({ width, height }: ScaledSize) =>\n  width >= height;\n\nexport function useDeviceOrientation() {\n  const screen = Dimensions.get('screen');\n  const initialState = {\n    portrait: isOrientationPortrait(screen),\n    landscape: isOrientationLandscape(screen),\n  };\n\n  const [orientation, setOrientation] = useState(initialState);\n\n  useEffect(() => {\n    const onChange = ({ screen }: { screen: ScaledSize }) => {\n      setOrientation({\n        portrait: isOrientationPortrait(screen),\n        landscape: isOrientationLandscape(screen),\n      });\n    };\n\n    const subscription = Dimensions.addEventListener('change', onChange);\n\n    return () => {\n      if (typeof subscription?.remove === 'function') {\n        subscription.remove();\n      } else {\n        // React Native < 0.65\n        Dimensions.removeEventListener('change', onChange);\n      }\n    };\n  }, []);\n\n  return orientation.portrait === true ? 'PORTRAIT' : 'LANDSCAPE';\n}\n"]},"metadata":{},"sourceType":"module"}